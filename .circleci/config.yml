version: 2.1

commands:
  create-or-update-stack:
    description: Create an AWS stack or update if it already exists.
    parameters:
      stack-name:
        type: string
      template-body:
        type: string
      parameters:
        type: string
    steps:
      - run:
          name: create or update stack
          command: |
            touch tmp.txt
            if ! aws cloudformation describe-stacks --stack-name <<parameters.stack-name>> --output text > tmp.txt
              then 
                echo "Creating stack..."
                aws cloudformation create-stack \
                  --stack-name <<parameters.stack-name>> \
                  --template-body <<parameters.template-body>> \
                  --parameters <<parameters.parameters>> \
                  --region=us-east-1 
              else
                echo "Updating stack..."
                # source: https://gist.github.com/mdjnewman/b9d722188f4f9c6bb277a37619665e77
                set +e
                update_output=$(aws cloudformation update-stack \
                  --stack-name <<parameters.stack-name>> \
                  --template-body <<parameters.template-body>> \
                  --parameters <<parameters.parameters>> \
                  --region=us-east-1)
                status=$?
                set -e

                echo "$update_output"

                if [ $status -ne 0 ] ; then

                  # Don't fail for no-op update
                  if [[ $update_output == *"ValidationError"* && $update_output == *"No updates"* ]] ; then
                    echo -e "\nFinished create/update - no updates to be performed"
                    exit 0
                  else
                    exit $status
                  fi
                fi
            fi

jobs:
  build-docker:
    docker:
      - image: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: docker build
          command: |
            docker build -t capstone .
            docker save -o docker_image capstone
      - persist_to_workspace:
          root: .
          paths:
            - docker_image
  upload-docker:
    docker:
      - image: docker
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run:
          name: docker upload
          command: |
            docker load -i docker_image
            docker tag capstone tomsharp12/capstone
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push tomsharp12/capstone
  deploy-network:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: install tar gzip
          command: |
            yum -y install tar gzip
      - attach_workspace:
          at: .
      - create-or-update-stack:
          stack-name: udacity-capstone-servers
          template-body: file://infra/servers/servers.yml
          parameters: file://infra/servers/servers.json
      # - run:
      #     name: deploy network
      #     command: |
      #       aws cloudformation update-stack \
      #         --stack-name udacity-capstone-network \
      #         --template-body file://infra/network/network.yml \
      #         --parameters file://infra/network/network.json \
      #         --region=us-east-1 
  deploy-servers:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: install tar gzip
          command: |
            yum -y install tar gzip
      - attach_workspace:
          at: .
      - create-or-update-stack:
          stack-name: udacity-capstone-servers
          template-body: file://infra/servers/servers.yml
          parameters: file://infra/servers/servers.json
      # - run:
      #     name: deploy network
      #     command: |
      #       aws cloudformation update-stack \
      #         --stack-name udacity-capstone-servers \
      #         --template-body file://infra/servers/servers.yml \
      #         --parameters file://infra/servers/servers.json \
      #         --region=us-east-1 
  deploy-app:
    docker:
      - image: docker
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run:
          name: docker upload
          command: |
            docker load -i docker_image
            docker tag capstone tomsharp12/capstone
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push tomsharp12/capstone

workflows:
  default:
    jobs:
      - build-docker
      - upload-docker:
          requires: [build-docker]
      - deploy-network:
          requires: []
      - deploy-servers:
          requires: [upload-docker, deploy-network]
      - deploy-app:
          requires: [deploy-servers]